<?xml version="1.0" encoding="UTF-8"?>
<!--
  Kunena ant build file

  @version      $Id:kunena.build.xml 95 2009-01-23 21:46:51Z fxstein $
  @copyright    Copyright (c) 2008 www.kunena.com 
  				portions 2007 MjazTools. All rights reserved.
  @license      GNU/GPL
  @link         http://www.kunena.com
  
  The following parameter need to be defined inside the Eclipse build task as Arguments. They
  allow the build file to be platform independent as not path information resides within
  any of the build files.
   
  Required Parameters: (with example - adjust the directories in Eclispe to your individual setup)
  	-Dproject_dir=${project_loc}/trunk/legacy 
  	-Dpackage_dir=/Development/packages 
  	-Dtmp_dir=/Development/tmp 
  Optional Parameter: (with examples - support for an additional custom build package)
  	-Dcustom_build=true (true if you want to also create a custom build)
  	-Dcustom_dir=/Development/workspace/www.starVmax.com (source directory for package overrides)
  	-Dcustom_postfix=starVmax (postfix used to identify the custom package files)
  
  If you elect to create a custom build, the build script will take all files from your custom 
  path and copy them OVER the regular build. New files are being added (e.g. emoticons), existing
  files will be overidden (replaced - e.g. custom color schema and files for one off template).
  If you opt to put in custom code that replaces one of the php files, you must make sure that the
  custom file is compatible with the rest of the build as embedded logic changes might make your
  custom file obsolete or incompatible.
  Custom build only supports front end modifications at this point in time.
-->
<project name="Kunena" default="dist" basedir=".">
	<description>Ant Build File for Kunena</description>
	<property file="kunena.build.config.ini" />
	<property name="fb.frontend" value="${project_dir}/components/com_kunena/" />
	<property name="fb.frontend.list" value="" />
	<property name="fb.backend" value="${project_dir}/administrator/components/com_kunena/" />
	<property name="fb.backend.list" value="" />
	<property name="fb.customfrontend" value="${custom_dir}/components/com_kunena/" />

	<target name="dist" depends="mkdir,archive,copy,init,package,zip,gzip,bz2,customcopy,custompackage,customzip,customgzip,custombz2,info,cleanup" />

	<target name="mkdir">
		<mkdir dir="${tmp_dir}" />
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/archive" />
	</target>

	<target name="archive">
		<move todir="${package_dir}/archive">
			<fileset dir="${package_dir}">
				<exclude name="archive/"/>
			</fileset>
		</move>
	</target>

	<target name="copy" depends="mkdir">
		<copy todir="${tmp_dir}">
			<fileset dir="${fb.frontend}" />
		</copy>
		<copy todir="${tmp_dir}">
			<fileset dir="${fb.backend}" />
		</copy>
	</target>

	<target name="init" depends="copy">
		<xmlproperty file="${tmp_dir}/${cfg.name}.xml" collapseAttributes="true" prefix="xml" keepRoot="false" />
		<buildnumber />
		<tstamp>
			<format property="str.datefmt" pattern="${cfg.datefmt}" locale="${cfg.dateloc}" />
		</tstamp>

		<condition property="str.build" value="_${cfg.buildprefix}${build.number}" else="">
			<istrue value="${cfg.addbuild}" />
		</condition>
		<condition property="str.version" value="_${cfg.versionprefix}${xml.version}" else="">
			<istrue value="${cfg.addversion}" />
		</condition>
		<condition property="str.date" value="_${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>
		<property name="str.destfile" value="${package_dir}/${cfg.prefix}${cfg.name}${str.version}${str.build}${str.date}" />

		<condition property="do.zip">
			<istrue value="${cfg.zip}" />
		</condition>
		<condition property="do.gzip">
			<istrue value="${cfg.gzip}" />
		</condition>
		<condition property="do.bz2">
			<istrue value="${cfg.bz2}" />
		</condition>
		<condition property="do.custom_build">
			<istrue value="${custom_build}" />
		</condition>
		<condition property="do.customzip">
			<and>
				<istrue value="${cfg.zip}" />
				<istrue value="${custom_build}" />
			</and>
		</condition>
		<condition property="do.customgzip">
			<and>
				<istrue value="${cfg.gzip}" />
				<istrue value="${custom_build}" />
			</and>
		</condition>
		<condition property="do.custombz2">
			<and>
				<istrue value="${cfg.bz2}" />
				<istrue value="${custom_build}" />
			</and>
		</condition>

	</target>

	<target name="package" depends="init">
		<!-- Copy files that conatin version tags again and perform token replacement -->
		<condition property="version.date" value="${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>
		<filter token="fbversion" value="${xml.version}" />
		<filter token="fbversiondate" value="${version.date}" />		
		<filter token="fbbuild" value="${build.number}" />		
		<filter token="fbversionname" value="${xml.versionname}" />		

		<script language="javascript" manager="bsf">
			<![CDATA[
		    // Create file list for Joomla xml install file
		    importClass(java.io.File);
		
		    frontend = project.getProperty("fb.frontend");
			fs = project.createDataType("fileset");
		    fs.setDir( new File(frontend) );

		    // Get the files (array) of that fileset
		    ds = fs.getDirectoryScanner(project);
		    srcFiles = ds.getIncludedFiles();
			filelist = "";
			
		    // iterate over that array
		    for (i=0; i<srcFiles.length; i++) 
			{
				filelist += "\n\r\t\t<filename>" + srcFiles[i] + "</filename>";
			}
			project.setProperty("fb.frontend.list", filelist);

		    backend = project.getProperty("fb.backend");
			fs = project.createDataType("fileset");
		    fs.setDir( new File(backend) );

		    // Get the files (array) of that fileset
		    ds = fs.getDirectoryScanner(project);
		    srcFiles = ds.getIncludedFiles();
			filelist = "";
			
		    // iterate over that array
		    for (i=0; i<srcFiles.length; i++) 
			{
				filelist += "\n\r\t\t<filename>" + srcFiles[i] + "</filename>";
			}
			project.setProperty("fb.backend.list", filelist);
			]]>
		</script>
		<filter token="fbfrontendlist" value="${fb.frontend.list}" />		
		<filter token="fbbackendlist" value="${fb.backend.list}" />		
		<copy file="${project_dir}/administrator/components/com_kunena/kunena.xml" todir="${tmp_dir}" overwrite="true" filtering="true" />
		<copy file="${project_dir}/administrator/components/com_kunena/install/kunena.install.upgrade.xml" todir="${tmp_dir}/install" overwrite="true" filtering="true" />
		<copy file="${project_dir}/components/com_kunena/lib/kunena.config.class.php" todir="${tmp_dir}/lib" overwrite="true" filtering="true" />
		<copy file="${project_dir}/components/com_kunena/lib/kunena.rss.php" todir="${tmp_dir}/lib" overwrite="true" filtering="true" />
		<copy file="${project_dir}/README.txt" todir="${tmp_dir}" overwrite="true" filtering="true" />
	</target>

	<target name="zip" depends="package" if="do.zip">
		<tar destfile="${str.destfile}.tar" basedir="${tmp_dir}" />
		<zip destfile="${str.destfile}.zip">
	 		<tarfileset src="${str.destfile}.tar"/>
		</zip>
	</target>

	<target name="gzip" depends="package" if="do.gzip">
		<tar destfile="${str.destfile}.tar.gz" basedir="${tmp_dir}" compression="gzip" />
	</target>

	<target name="bz2" depends="package" if="do.bz2">
		<tar destfile="${str.destfile}.tar.bz2" basedir="${tmp_dir}" compression="bzip2" />
	</target>

	<target name="customcopy" depends="mkdir" if="do.custom_build">
		<copy todir="${tmp_dir}" overwrite="true">
			<fileset dir="${custom_dir}/components/com_kunena/" />
		</copy>
	</target>

	<target name="custompackage" depends="customcopy" if="do.custom_build">
		<!-- Copy files that conatin version tags again and perform token replacement -->
		<condition property="version.date" value="${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>
		<filter token="fbversion" value="${xml.version}" />
		<filter token="fbversiondate" value="${version.date}" />		
		<filter token="fbbuild" value="${build.number}" />		
		<filter token="fbversionname" value="${xml.versionname}" />		

		<script language="javascript" manager="bsf">
			<![CDATA[
		    // Create file list for Joomla xml install file
		    importClass(java.io.File);
		
		    frontend = project.getProperty("fb.frontend");
			fs = project.createDataType("fileset");
		    fs.setDir( new File(frontend) );

		    // Get the files (array) of that fileset
		    ds = fs.getDirectoryScanner(project);
		    srcFiles = ds.getIncludedFiles();

			filelist = "";
			var seen = new Object ();
			// iterate over that array
		    for (i=0; i<srcFiles.length; i++) 
			{
				filelist += "\n\r\t\t<filename>" + srcFiles[i] + "</filename>";
				// Needed for second pass deduping...
				seen[srcFiles[i]] = 1;
			}
			
			// Now do it again for the custom additions/overrides
			frontend = project.getProperty("fb.customfrontend");
			fs = project.createDataType("fileset");
		    fs.setDir( new File(frontend) );

		    // Get the files (array) of that fileset
		    ds = fs.getDirectoryScanner(project);
		    srcFiles = ds.getIncludedFiles();
			
			// iterate over that array
		    for (i=0; i<srcFiles.length; i++) 
			{
				// dedupe the file list or Joomla will complain
				if( seen[srcFiles[i]] ) continue;
				filelist += "\n\r\t\t<filename>" + srcFiles[i] + "</filename>";
			}
			
			project.setProperty("fb.frontend.list", filelist);

		    backend = project.getProperty("fb.backend");
			fs = project.createDataType("fileset");
		    fs.setDir( new File(backend) );

		    // Get the files (array) of that fileset
		    ds = fs.getDirectoryScanner(project);
		    srcFiles = ds.getIncludedFiles();
			filelist = "";
			
		    // iterate over that array
		    for (i=0; i<srcFiles.length; i++) 
			{
				filelist += "\n\r\t\t<filename>" + srcFiles[i] + "</filename>";
			}

			project.setProperty("fb.backend.list", filelist);
			]]>
		</script>
		<filter token="fbfrontendlist" value="${fb.frontend.list}" />		
		<filter token="fbbackendlist" value="${fb.backend.list}" />		
		<copy file="${project_dir}/administrator/components/com_kunena/kunena.xml" todir="${tmp_dir}" overwrite="true" filtering="true" />
		<copy file="${project_dir}/administrator/components/com_kunena/install/kunena.install.upgrade.xml" todir="${tmp_dir}/install" overwrite="true" filtering="true" />
		<copy file="${project_dir}/components/com_kunena/lib/kunena.config.class.php" todir="${tmp_dir}/lib" overwrite="true" filtering="true" />
		<copy file="${project_dir}/README.txt" todir="${tmp_dir}" overwrite="true" filtering="true" />
	</target>

	<target name="customzip" depends="custompackage" if="do.customzip">
		<tar destfile="${str.destfile}_${custom_postfix}.tar" basedir="${tmp_dir}" />
		<zip destfile="${str.destfile}_${custom_postfix}.zip">
	 		<tarfileset src="${str.destfile}_${custom_postfix}.tar"/>
		</zip>
	</target>

	<target name="customgzip" depends="custompackage" if="do.customgzip">
		<tar destfile="${str.destfile}_${custom_postfix}.tar.gz" basedir="${tmp_dir}" compression="gzip" />
	</target>

	<target name="custombz2" depends="custompackage" if="do.custombz2">
		<tar destfile="${str.destfile}_${custom_postfix}.tar.bz2" basedir="${tmp_dir}" compression="bzip2" />
	</target>
	
	<target name="info" depends="package">
		<echo message="Ant Version:     ${ant.version}" />
		<echo message="Project:         ${cfg.name}" />
		<echo message="XML Name:        ${xml.name}" />
		<echo message="XML Version:     ${xml.version}" />
		<echo message="XML Author:      ${xml.author}" />
		<echo message="XML Copyright:   ${xml.copyright}" />
		<echo message="XML License:     ${xml.license}" />
		<echo message="XML Description: ${xml.description}" />
		<echo message="Build:           ${build.number}" />
		<echo message="Date:            ${TODAY}" />
	</target>

	<target name="cleanup" depends="info">
		<delete dir="${tmp_dir}" />
	</target>
</project>